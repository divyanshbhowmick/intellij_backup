package com.divyansh.coding.ACE_DSA1;

import java.util.ArrayList;
import java.util.Arrays;

/**
    Given a string print the subsequences of the given string
    A string is a subsequence of given string if it's generated by deleting some character of the string without changing the order of the string.

    input: abc
    output: "",a,b,c, ab, ac, bc, abc - (2^N) is the length of the subsequences

    Approach: Recursion- if we can know the answer for a single string like for c it would be "" and c... and then for bc it would be:
    i) Add b to result of c ---- b+"", b+c ----- b,bc
    ii) Do not add b to the result ---- "",c
    so in total we have -- 4 subsequences i.e "",b,c,bc for the string bc

    Breaking it into simpler chunks:
    1) Recursive call - simply we will compute the answer for c and then will calculate for bc.
    2) Base case ------ i) For empty string the output will be empty
                        ii) If the length of string is 1 then always the output will be the character and a empty string
    3) Self work ------ i) once we ddd the character to the smaller string output.
                        ii) once we don't add the character.

 **/
public class Subsequences {
    public static void main(String[] args) {
        System.out.println(getSubsequences("abc"));
    }

    private static ArrayList<String> getSubsequences(String str) {

        //Base condition
        if(str.length() == 0) return new ArrayList<String>(Arrays.asList(""));

        char ch = str.charAt(0); // get the first character and try to compute the result for the rest string and once add it and once doesn't add it to the result.
        String restString = str.substring(1);

        //Recursive calls
        ArrayList<String> computedResult = getSubsequences(restString);

        //Result
        ArrayList<String> result = new ArrayList<>();
        
        //Self work
        for (String val : computedResult){
            result.add(val); //adding the char
            result.add(val + ch);// not adding the char
        }
        return result;
    }
}
